/*
STACKIT PostgreSQL Flex API

This is the documentation for the STACKIT postgres service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresflex

import (
	"encoding/json"
	"net/url"
	"strconv"
	"strings"
)

// checks if the CreateUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserResponse{}

/*
	types and functions for item
*/

// isModel
type CreateUserResponseGetItemAttributeType = *User
type CreateUserResponseGetItemArgType = User
type CreateUserResponseGetItemRetType = User

func getCreateUserResponseGetItemAttributeTypeOk(arg CreateUserResponseGetItemAttributeType) (ret CreateUserResponseGetItemRetType, ok bool) {
	if arg == nil {
		return ret, false
	}
	return *arg, true
}

func setCreateUserResponseGetItemAttributeType(arg *CreateUserResponseGetItemAttributeType, val CreateUserResponseGetItemRetType) {
	*arg = &val
}

// CreateUserResponse struct for CreateUserResponse
type CreateUserResponse struct {
	Item CreateUserResponseGetItemAttributeType `json:"item,omitempty"`
}

// NewCreateUserResponse instantiates a new CreateUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserResponse() *CreateUserResponse {
	this := CreateUserResponse{}
	return &this
}

// NewCreateUserResponseWithDefaults instantiates a new CreateUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserResponseWithDefaults() *CreateUserResponse {
	this := CreateUserResponse{}
	return &this
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *CreateUserResponse) GetItem() (res CreateUserResponseGetItemRetType) {
	res, _ = o.GetItemOk()
	return
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserResponse) GetItemOk() (ret CreateUserResponseGetItemRetType, ok bool) {
	return getCreateUserResponseGetItemAttributeTypeOk(o.Item)
}

// HasItem returns a boolean if a field has been set.
func (o *CreateUserResponse) HasItem() bool {
	_, ok := o.GetItemOk()
	return ok
}

// SetItem gets a reference to the given User and assigns it to the Item field.
func (o *CreateUserResponse) SetItem(v CreateUserResponseGetItemRetType) {
	setCreateUserResponseGetItemAttributeType(&o.Item, v)
}

func (o CreateUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if val, ok := getCreateUserResponseGetItemAttributeTypeOk(o.Item); ok {
		toSerialize["Item"] = val
	}
	return toSerialize, nil
}

type NullableCreateUserResponse struct {
	value *CreateUserResponse
	isSet bool
}

func (v NullableCreateUserResponse) Get() *CreateUserResponse {
	return v.value
}

func (v *NullableCreateUserResponse) Set(val *CreateUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserResponse(val *CreateUserResponse) *NullableCreateUserResponse {
	return &NullableCreateUserResponse{value: val, isSet: true}
}

func (v NullableCreateUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

// UnmarshalJSON custom unmarshaling to handle both old and new API response formats
func (o *CreateUserResponse) UnmarshalJSON(src []byte) error {
	// First, try to unmarshal as the new format (direct fields at root level)
	var newFormat struct {
		ConnectionString string `json:"connectionString"`
		ID               int    `json:"id"`
		Name             string `json:"name"`
		Password         string `json:"password"`
		Status           string `json:"status"`
	}

	if err := json.Unmarshal(src, &newFormat); err == nil && newFormat.ConnectionString != "" {
		// This is the new format, transform it to the old format
		user := o.transformNewFormatToOld(newFormat)
		o.Item = &user
		return nil
	}

	// If that fails, try the old format (with item wrapper)
	var oldFormat struct {
		Item *User `json:"item"`
	}

	if err := json.Unmarshal(src, &oldFormat); err == nil && oldFormat.Item != nil {
		o.Item = oldFormat.Item
		return nil
	}

	// If both fail, return the original error
	return json.Unmarshal(src, o)
}

// transformNewFormatToOld converts the new API response format to the old User struct
func (o *CreateUserResponse) transformNewFormatToOld(newFormat struct {
	ConnectionString string `json:"connectionString"`
	ID               int    `json:"id"`
	Name             string `json:"name"`
	Password         string `json:"password"`
	Status           string `json:"status"`
}) User {
	user := User{}

	// Set basic fields
	user.SetId(strconv.Itoa(newFormat.ID))
	user.SetUsername(newFormat.Name)
	user.SetPassword(newFormat.Password)
	user.SetUri(newFormat.ConnectionString)

	// Parse connection string to extract host, port, and database
	if newFormat.ConnectionString != "" {
		host, port, database := parseConnectionString(newFormat.ConnectionString)
		if host != "" {
			user.SetHost(host)
		}
		if port != 0 {
			user.SetPort(int64(port))
		}
		if database != "" {
			user.SetDatabase(database)
		}
	}

	// Set default roles (these might need to be adjusted based on your requirements)
	user.SetRoles([]string{"createdb", "login", "createrole"})

	return user
}

// parseConnectionString extracts host, port, and database from a PostgreSQL connection string
func parseConnectionString(connStr string) (host string, port int, database string) {
	// Parse the connection string
	u, err := url.Parse(connStr)
	if err != nil {
		return "", 0, ""
	}

	host = u.Hostname()
	if u.Port() != "" {
		if p, err := strconv.Atoi(u.Port()); err == nil {
			port = p
		}
	}

	// Extract database from path (remove leading slash)
	if u.Path != "" {
		database = strings.TrimPrefix(u.Path, "/")
	}

	return host, port, database
}
